// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  admin
  warehouse_manager
  sales_person
}

// User model
model OUR_USER {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  fullName   String
  phone      String?
  address    String?
  department String?  // Optional field
  joinDate   DateTime @default(now())
  lastVisit  DateTime @default(now())
  totalSpent Float    @default(0)
  visits     Int      @default(0)
  type       String   @default("New") // New, Regular, VIP
  notes      String?
  status     String   @default("ACTIVE")
  role       UserRole
  createdById  String?
  createdBy    OUR_USER?  @relation("CreatedUsers", fields: [createdById], references: [id])
  createdUsers OUR_USER[] @relation("CreatedUsers")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  transactions Transaction[]
  products   Product[] // Products created by this user
  stockItems StockItem[] // Stock items created by this user
  stockTransactions StockTransaction[] // Stock transactions created by this user
  suppliers  Supplier[] // Suppliers created by this user
}

// Product model
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  price       Float
  quantity    Int
  category    String?
  vendor      String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   OUR_USER? @relation(fields: [createdById], references: [id])
  createdById String?  // Add this field to track who created the product
  transactionItems TransactionItem[]
}

// Supplier model
model Supplier {
  id            String   @id @default(cuid())
  name          String
  contactPerson String
  email         String
  phone         String
  products      String
  status        String   @default("Active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     OUR_USER? @relation(fields: [createdById], references: [id])
  createdById   String?  // Add this field to track who created the supplier
}

// StockItem model
model StockItem {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  category    String?
  quantity    Float    @default(0)
  location    String?
  status      String?
  type        String?
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  transactions StockTransaction[]
  createdBy   OUR_USER? @relation(fields: [createdById], references: [id])
  createdById String?  // Add this field to track who created the stock item
}

// StockTransaction model
model StockTransaction {
  id              String   @id @default(cuid())
  type            String
  quantity        Float
  previousQuantity Float
  newQuantity     Float
  location        String?
  reference       String?
  reason          String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  stockItem       StockItem? @relation(fields: [stockItemId], references: [id])
  stockItemId     String?
  metadata        Json?
  createdBy       OUR_USER? @relation(fields: [createdById], references: [id])
  createdById     String?  // Add this field to track who created the transaction
}

// Transaction model
model Transaction {
  id              String   @id @default(cuid())
  reference       String   @unique // e.g., "SALE-12345"
  date            DateTime @default(now())
  subtotal        Float
  tax             Float
  discount        Float    @default(0)
  total           Float
  paymentMethod   String
  status          String   @default("Completed") // Completed, Voided
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  customer        OUR_USER? @relation(fields: [customerId], references: [id])
  customerId      String?
  cashierId       String?
  cashierName     String?
  items           TransactionItem[]
}

// TransactionItem model
model TransactionItem {
  id            String   @id @default(cuid())
  quantity      Int
  price         Float
  discount      Float    @default(0)
  total         Float
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String
  product       Product @relation(fields: [productId], references: [id])
  productId     String
  createdAt     DateTime @default(now())
}

// New model for register sessions
model RegisterSession {
  id            String   @id @default(cuid())
  openedAt      DateTime @default(now())
  closedAt      DateTime?
  openingBalance Float
  closingBalance Float?
  difference    Float?
  status        String   // Open, Closed
  notes         String?
  cashierId     String?
  cashierName   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
